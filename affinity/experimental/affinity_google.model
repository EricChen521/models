name: "Affinity_GoogLeNet"

layer {
    name: "data"
    type: "MolGridData"
    top: "data"
    top: "label"
    top: "affinity"
    include {
        phase: TEST
    }
    molgrid_data_param {
        source: "TESTFILE"
        batch_size: 50
        dimension: 23.5
        resolution: 0.5
        shuffle: false
        balanced: false
        has_affinity: true
        root_folder: "/net/pulsar/home/koes/dkoes/PDBbind/refined-set/"
    }
}

layer {
    name: "data"
    type: "MolGridData"
    top: "data"
    top: "label"
    top: "affinity"
    include {
        phase: TRAIN
    }
    molgrid_data_param {
        source: "TRAINFILE"
        batch_size:  50
        dimension: 23.5
        resolution: 0.5
        shuffle: true
        balanced: true
        stratify_receptor: true
        stratify_affinity_min: 0
        stratify_affinity_max: 0
        stratify_affinity_step: 0
        has_affinity: true
        random_rotation: true
        random_translate: 2
        root_folder: "/net/pulsar/home/koes/dkoes/PDBbind/refined-set/"
    }
}

# Beginning of GoogLe Net------------------------------------------------------------

layer {
    name: "conv1/7x7_s2"
    type: "Convolution"
    bottom: "data"
    top: "conv1/7x7_s2"
    convolution_param {
        num_output: 64
        pad: 3
        kernel_size: 7
        stride: 2
        weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
            value: 0.2
        }
    }
}

layer {
    name: "conv1/relu_7x7"
    type: "ReLU"
    bottom: "conv1/7x7_s2"
    top: "conv1/7x7_s2"
}

layer {
    name: "pool1/3x3_s2"
    type: "Pooling"
    bottom: "conv1/7x7_s2"
    top: "pool1/3x3_s2"
    pooling_param {
        pool: MAX
        kernel_size: 3
        stride: 2
    }
}

layer {
    name: "pool1/norm1"
    type: "LRN"
    bottom: "pool1/3x3_s2"
    top: "pool1/norm1"
    lrn_param {
        local_size: 5
        alpha: 0.0001
        beta: 0.75
    }
}

layer {
    name: "conv2/3x3_reduce"
    type: "Convolution"
    bottom: "pool1/norm1"
    top: "conv2/3x3_reduce"
    convolution_param {
        num_output: 64
        pad: 0
        kernel_size: 1
        stride: 1
        weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
            value: 0.2
        }
    }
}

layer {
    name: "conv2/relu_3x3_reduce"
    type: "ReLU"
    bottom: "conv2/3x3_reduce"
    top: "conv2/3x3_reduce"
}

layer {
    name: "conv2/3x3"
    type: "Convolution"
    bottom: "conv2/3x3_reduce"
    top: "conv2/3x3"
    convolution_param {
        num_output: 192
        pad: 1
        kernel_size: 3
        stride: 1
        weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
            value: 0.2
        }
    }
}

layer {
    name: "conv2/relu_3x3"
    type: "ReLU"
    bottom: "conv2/3x3"
    top: "conv2/3x3"
}

layer {
    name: "conv2/norm2"
    type: "LRN"
    bottom: "conv2/3x3"
    top: "conv2/norm2"
    lrn_param {
        local_size: 5
        alpha: 0.0001
        beta: 0.75
    }
}

# ----------------------------------------------------
# Inception Unit 1 -----------------------------------
# ----------------------------------------------------

layer {
    name: "pool2/3x3_s2"
    type: "Pooling"
    bottom: "conv2/norm2"
    top: "pool2/3x3_s2"
    pooling_param {
        pool: MAX
        kernel_size: 3
        stride: 2
    }
}

layer {
    name: "inception_3a/1x1"
    type: "Convolution"
    bottom: "pool2/3x3_s2"
    top: "inception_3a/1x1"
    convolution_param {
        num_output: 64
        kernel_size: 1
        weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
            value: 0.2
        }
    }
}
layer {
    name: "inception_3a/relu_1x1"
    type: "ReLU"
    bottom: "inception_3a/1x1"
    top: "inception_3a/1x1"
}

# ------------------------------------------


layer {
    name: "inception_3a/3x3_reduce"
    type: "Convolution"
    bottom: "pool2/3x3_s2"
    top: "inception_3a/3x3_reduce"
    convolution_param {
        num_output: 96
        kernel_size: 1
        weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
            value: 0.2
        }
    }
}
layer {
    name: "inception_3a/relu_3x3_reduce"
    type: "ReLU"
    bottom: "inception_3a/3x3_reduce"
    top: "inception_3a/3x3_reduce"
}

layer {
    name: "inception_3a/3x3"
    type: "Convolution"
    bottom: "inception_3a/3x3_reduce"
    top: "inception_3a/3x3"
    convolution_param {
        num_output: 128
        pad: 1
        kernel_size: 3
        weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
            value: 0.2
        }
    }
}
layer {
    name: "inception_3a/relu_3x3"
    type: "ReLU"
    bottom: "inception_3a/3x3"
    top: "inception_3a/3x3"
}

# ------------------------------------------

layer {
    name: "inception_3a/5x5_reduce"
    type: "Convolution"
    bottom: "pool2/3x3_s2"
    top: "inception_3a/5x5_reduce"
    convolution_param {
        num_output: 16
        kernel_size: 1
        weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
            value: 0.2
        }
    }
}
layer {
    name: "inception_3a/relu_5x5_reduce"
    type: "ReLU"
    bottom: "inception_3a/5x5_reduce"
    top: "inception_3a/5x5_reduce"
}

layer {
    name: "inception_3a/5x5"
    type: "Convolution"
    bottom: "inception_3a/5x5_reduce"
    top: "inception_3a/5x5"
    convolution_param {
        num_output: 32
        pad: 2
        kernel_size: 5
        weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
            value: 0.2
        }
    }
}
layer {
    name: "inception_3a/relu_5x5"
    type: "ReLU"
    bottom: "inception_3a/5x5"
    top: "inception_3a/5x5"
}

# ------------------------------------------

layer {
    name: "inception_3a/pool"
    type: "Pooling"
    bottom: "pool2/3x3_s2"
    top: "inception_3a/pool"
    pooling_param {
        pool: MAX
        kernel_size: 3
        stride: 1
        pad: 1
    }
}

layer {
    name: "inception_3a/pool_proj"
    type: "Convolution"
    bottom: "inception_3a/pool"
    top: "inception_3a/pool_proj"
    convolution_param {
        num_output: 32
        kernel_size: 1
        weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
            value: 0.2
        }
    }
}
layer {
    name: "inception_3a/relu_pool_proj"
    type: "ReLU"
    bottom: "inception_3a/pool_proj"
    top: "inception_3a/pool_proj"
}

# ------------------------------------------

layer {
    name: "inception_3a/output"
    type: "Concat"
    bottom: "inception_3a/1x1"
    bottom: "inception_3a/3x3"
    bottom: "inception_3a/5x5"
    bottom: "inception_3a/pool_proj"
    top: "inception_3a/output"
}

# ----------------------------------------------------
# Inception Unit 2 -----------------------------------
# ----------------------------------------------------

layer {
    name: "inception_3b/1x1"
    type: "Convolution"
    bottom: "inception_3a/output"
    top: "inception_3b/1x1"
    convolution_param {
        num_output: 128
        kernel_size: 1
        weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
            value: 0.2
        }
    }
}
layer {
    name: "inception_3b/relu_1x1"
    type: "ReLU"
    bottom: "inception_3b/1x1"
    top: "inception_3b/1x1"
}

# ------------------------------------------

layer {
    name: "inception_3b/3x3_reduce"
    type: "Convolution"
    bottom: "inception_3a/output"
    top: "inception_3b/3x3_reduce"
    convolution_param {
        num_output: 128
        kernel_size: 1
        weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
            value: 0.2
        }
    }
}
layer {
    name: "inception_3b/relu_3x3_reduce"
    type: "ReLU"
    bottom: "inception_3b/3x3_reduce"
    top: "inception_3b/3x3_reduce"
}

layer {
    name: "inception_3b/3x3"
    type: "Convolution"
    bottom: "inception_3b/3x3_reduce"
    top: "inception_3b/3x3"
    convolution_param {
        num_output: 192
        pad: 1
        kernel_size: 3
        weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
            value: 0.2
        }
    }
}
layer {
    name: "inception_3b/relu_3x3"
    type: "ReLU"
    bottom: "inception_3b/3x3"
    top: "inception_3b/3x3"
}

# ------------------------------------------

layer {
    name: "inception_3b/5x5_reduce"
    type: "Convolution"
    bottom: "inception_3a/output"
    top: "inception_3b/5x5_reduce"
    convolution_param {
        num_output: 32
        kernel_size: 1
        weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
            value: 0.2
        }
    }
}
layer {
    name: "inception_3b/relu_5x5_reduce"
    type: "ReLU"
    bottom: "inception_3b/5x5_reduce"
    top: "inception_3b/5x5_reduce"
}
layer {
    name: "inception_3b/5x5"
    type: "Convolution"
    bottom: "inception_3b/5x5_reduce"
    top: "inception_3b/5x5"
    convolution_param {
        num_output: 96
        pad: 2
        kernel_size: 5
        weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
            value: 0.2
        }
    }
}
layer {
    name: "inception_3b/relu_5x5"
    type: "ReLU"
    bottom: "inception_3b/5x5"
    top: "inception_3b/5x5"
}

# ------------------------------------------

layer {
  name: "inception_3b/pool"
  type: "Pooling"
  bottom: "inception_3a/output"
  top: "inception_3b/pool"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 1
    pad: 1
  }
}

layer {
    name: "inception_3b/pool_proj"
    type: "Convolution"
    bottom: "inception_3b/pool"
    top: "inception_3b/pool_proj"
    convolution_param {
        num_output: 64
        kernel_size: 1
        weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
            value: 0.2
        }
    }
}
layer {
    name: "inception_3b/relu_pool_proj"
    type: "ReLU"
    bottom: "inception_3b/pool_proj"
    top: "inception_3b/pool_proj"
}

# ------------------------------------------

layer {
    name: "inception_3b/output"
    type: "Concat"
    bottom: "inception_3b/1x1"
    bottom: "inception_3b/3x3"
    bottom: "inception_3b/5x5"
    bottom: "inception_3b/pool_proj"
    top: "inception_3b/output"
}

# ----------------------------------------------------
# Inception Unit 3 -----------------------------------
# ----------------------------------------------------

layer {
    name: "pool3/3x3_s2"
    type: "Pooling"
    bottom: "inception_3b/output"
    top: "pool3/3x3_s2"
    pooling_param {
        pool: MAX
        kernel_size: 3
        stride: 2
    }
}

layer {
    name: "inception_4a/1x1"
    type: "Convolution"
    bottom: "pool3/3x3_s2"
    top: "inception_4a/1x1"
    convolution_param {
        num_output: 192
        kernel_size: 1
        weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
            value: 0.2
        }
    }
}
layer {
    name: "inception_4a/relu_1x1"
    type: "ReLU"
    bottom: "inception_4a/1x1"
    top: "inception_4a/1x1"
}

# ------------------------------------------

layer {
    name: "inception_4a/3x3_reduce"
    type: "Convolution"
    bottom: "pool3/3x3_s2"
    top: "inception_4a/3x3_reduce"
    convolution_param {
        num_output: 96
        kernel_size: 1
        weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
            value: 0.2
        }
    }
}
layer {
    name: "inception_4a/relu_3x3_reduce"
    type: "ReLU"
    bottom: "inception_4a/3x3_reduce"
    top: "inception_4a/3x3_reduce"
}

layer {
    name: "inception_4a/3x3"
    type: "Convolution"
    bottom: "inception_4a/3x3_reduce"
    top: "inception_4a/3x3"
    convolution_param {
        num_output: 208
        pad: 1
        kernel_size: 3
        weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
            value: 0.2
        }
    }
}
layer {
    name: "inception_4a/relu_3x3"
    type: "ReLU"
    bottom: "inception_4a/3x3"
    top: "inception_4a/3x3"
}

# ------------------------------------------

layer {
    name: "inception_4a/5x5_reduce"
    type: "Convolution"
    bottom: "pool3/3x3_s2"
    top: "inception_4a/5x5_reduce"
    convolution_param {
        num_output: 16
        kernel_size: 1
        weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
            value: 0.2
        }
    }
}
layer {
    name: "inception_4a/relu_5x5_reduce"
    type: "ReLU"
    bottom: "inception_4a/5x5_reduce"
    top: "inception_4a/5x5_reduce"
}

layer {
    name: "inception_4a/5x5"
    type: "Convolution"
    bottom: "inception_4a/5x5_reduce"
    top: "inception_4a/5x5"
    convolution_param {
        num_output: 48
        pad: 2
        kernel_size: 5
        weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
            value: 0.2
        }
    }
}
layer {
    name: "inception_4a/relu_5x5"
    type: "ReLU"
    bottom: "inception_4a/5x5"
    top: "inception_4a/5x5"
}

# ------------------------------------------

layer {
    name: "inception_4a/pool"
    type: "Pooling"
    bottom: "pool3/3x3_s2"
    top: "inception_4a/pool"
    pooling_param {
        pool: MAX
        kernel_size: 3
        stride: 1
        pad: 1
    }
}

layer {
    name: "inception_4a/pool_proj"
    type: "Convolution"
    bottom: "inception_4a/pool"
    top: "inception_4a/pool_proj"
    convolution_param {
        num_output: 64
        kernel_size: 1
        weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
            value: 0.2
        }
    }
}
layer {
    name: "inception_4a/relu_pool_proj"
    type: "ReLU"
    bottom: "inception_4a/pool_proj"
    top: "inception_4a/pool_proj"
}

# ------------------------------------------

layer {
    name: "inception_4a/output"
    type: "Concat"
    bottom: "inception_4a/1x1"
    bottom: "inception_4a/3x3"
    bottom: "inception_4a/5x5"
    bottom: "inception_4a/pool_proj"
    top: "inception_4a/output"
}

# ----------------------------------------------------
# Processing -----------------------------------------
# ----------------------------------------------------

layer {
    name: "pool4/5x5_s3"
    type: "Pooling"
    bottom: "inception_4a/output"
    top: "pool4/5x5_s3"
    pooling_param {
        pool: AVE
        kernel_size: 5
        stride: 3
    }
}

# End of GoogLe Net---------------------------------------------------------------

layer {
    name: "split"
    type: "Split"
    bottom: "pool4/5x5_s3"
    top: "split"
}

layer {
    name: "output_fc"
    type: "InnerProduct"
    bottom: "split"
    top: "output_fc"
    inner_product_param {
        num_output: 2
        weight_filler {
            type: "xavier"
        }
    }
}

layer {
    name: "loss"
    type: "SoftmaxWithLoss"
    bottom: "output_fc"
    bottom: "label"
    top: "loss"
}

layer {
    name: "output"
    type: "Softmax"
    bottom: "output_fc"
    top: "output"
}

layer {
    name: "labelout"
    type: "Split"
    bottom: "label"
    top: "labelout"
    include {
        phase: TEST
    }
}


layer {
    name: "output_fc_aff"
    type: "InnerProduct"
    bottom: "split"
    top: "output_fc_aff"
    inner_product_param {
        num_output: 1
        weight_filler {
            type: "xavier"
        }
    }
}

layer {
    name: "rmsd"
    type: "AffinityLoss"
    bottom: "output_fc_aff"
    bottom: "affinity"
    top: "rmsd"
    affinity_loss_param {
        gap: 0
        pseudohuber: true
        delta: 4
    }
}

layer {
    name: "predaff"
    type: "Flatten"
    bottom: "output_fc_aff"
    top: "predaff"
}

layer {
    name: "affout"
    type: "Split"
    bottom: "affinity"
    top: "affout"
    include {
        phase: TEST
    }
}
